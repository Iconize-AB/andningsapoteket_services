// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int       @id @default(autoincrement())
  firstName                  String?   // Optional field
  lastName                   String?   // Optional field
  fullName                   String?   // Optional field
  active                     Boolean
  subscriptionType           String?
  subscriptionEndDate        DateTime?
  pushToken                  String?
  resetCode                  String?
  resetCodeExpiry            String?
  password                   String
  email                      String    @unique
  language                   String?
  inviteCode                 String?
  inviteCodeUses             Int       @default(0)
  helpOptions                String[]
  phoneNumber                String?
  verificationCode           String?
  userCategories             UserCategory[]
  batchesFollowed            Batch[]   @relation("FollowedUsers")
  batchesFollowing           Batch[]   @relation("FollowingUsers")
  viewedOnBoarding           String?
  profileId                  Int?      // Optional profileId
  profile                    Profile?  // Optional relation
  username                   String?   @unique
  role                       String?
  createdAt                  DateTime  @default(now())
  savedSessionLists          SavedSessionList[]
  diaryEntries               DiaryEntry[]
  userSessionRatings         UserSessionRating[]
  sessionComments            SessionComment[]
  breathworkLists            BreathworkList[]
  sessionWatches             SessionWatch[]
  libraries                  Library[]
  lastActive                 DateTime?  @updatedAt
  sessionLikes               SessionLike[]
  sessionStartEvents         SessionStartEvent[]
  sessionEndEvents           SessionEndEvent[]
  eventTracking              EventTracking[]
  deviceType                 String?
}

model Profile {
  id                         Int       @id @default(autoincrement())
  pushNotifications          Boolean
  emailNotifications         Boolean
  acceptedTermsAndConditions Boolean
  profileImageUrl            String?
  ratingFunction             Boolean
  userId                     Int       @unique
  user                       User      @relation(fields: [userId], references: [id]) // Foreign key constraint on this side
}

model Batch {
  id              Int      @id @default(autoincrement())
  followingUserId Int
  followedUserId  Int
  name            String
  color           String
  createdAt       DateTime  @default(now())
  followingUser   User      @relation("FollowingUsers", fields: [followingUserId], references: [id])
  followedUser    User      @relation("FollowedUsers", fields: [followedUserId], references: [id])
}

model UserCategory {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model SavedSessionList {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}


model Session {
  id          Int       @id @default(autoincrement())
  category    String
  title       String
  description String
  likes       Int       @default(0)
  color       String?
  url         String
  duration    Float?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  comments    SessionComment[]
  ratings     UserSessionRating[]
  lists       BreathworkListsForSession[]
  libraries   LibraryForSession[]
  activated   Boolean   @default(true)
  categories  Json      // Array of strings representing what the session is good for
  watches     SessionWatch[]
  userLikes   SessionLike[]
  highlighted Boolean   @default(false)
  startEvents SessionStartEvent[]
  endEvents   SessionEndEvent[]
  eventTracking EventTracking[]
}

model SessionLike {
  id        Int    @id @default(autoincrement())
  sessionId Int
  userId    Int
  createdAt DateTime @default(now())
  session   Session   @relation(fields: [sessionId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  @@unique([sessionId, userId])
}

model SessionWatch {
  id        Int      @id @default(autoincrement())
  userId    Int
  sessionId Int
  watchedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  session   Session  @relation(fields: [sessionId], references: [id])
}

model SessionComment {
  id        Int      @id @default(autoincrement())
  sessionId Int
  userId    Int
  comment   String
  createdAt DateTime  @default(now())
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model BreathworkList {
  id              Int      @id @default(autoincrement())
  name            String
  userId          Int
  runSessionCount Int      @default(0)
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id])
  sessions        BreathworkListsForSession[]
}

model BreathworkListsForSession {
  id              Int      @id @default(autoincrement())
  trainingListId  Int
  sessionId       Int
  createdAt       DateTime  @default(now())
  trainingList    BreathworkList @relation(fields: [trainingListId], references: [id])
  session         Session   @relation(fields: [sessionId], references: [id])
}

model Library {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique  // Each user has one library
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  sessions    LibraryForSession[]
}

model LibraryForSession {
  id          Int       @id @default(autoincrement())
  libraryId   Int
  sessionId   Int
  createdAt   DateTime  @default(now())
  library     Library   @relation(fields: [libraryId], references: [id])
  session     Session   @relation(fields: [sessionId], references: [id])
}

model DiaryEntry {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  rating    Int
  option    String?
  userId    Int
  createdAt DateTime  @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserSessionRating {
  id            Int      @id @default(autoincrement())
  userId        Int
  sessionId     Int
  feelingBefore Int
  feelingAfter  Int
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  session       Session   @relation(fields: [sessionId], references: [id])
}

model SixDayChallenge {
  id          Int                @id @default(autoincrement())
  title       String
  description String             @db.Text
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  sessions    ChallengeSession[]
}

model EventTracking {
  id                    Int       @id @default(autoincrement())
  userId                Int
  eventType             String    // e.g., "session_start", "session_pause", "feature_interaction"
  timestamp             DateTime  @default(now())
  sessionId             Int?
  challengeId           Int?
  breathworkListId      Int?
  duration              Float?
  actionTaken           String?   // e.g., "pause", "resume", "skip", "add_to_library"
  featureInteracted     String?   // e.g., "library", "breathwork_list", "diary"
  createdAt             DateTime  @default(now())
  user                  User      @relation(fields: [userId], references: [id])
  session               Session?  @relation(fields: [sessionId], references: [id])
}

model ChallengeSession {
  id          Int             @id @default(autoincrement())
  title       String
  description String          @db.Text
  longDescription String      @db.Text
  sessionUrl    String
  audioUrl    String?
  duration    Int
  day         Int
  challenge   SixDayChallenge @relation(fields: [challengeId], references: [id])
  challengeId Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model SessionStartEvent {
  id        Int      @id @default(autoincrement())
  userId    Int
  sessionId Int
  startTime DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  session   Session  @relation(fields: [sessionId], references: [id])
}

model SessionEndEvent {
  id              Int      @id @default(autoincrement())
  userId          Int
  sessionId       Int
  startEventId    Int
  endTime         DateTime @default(now())
  durationWatched Float    // Duration watched in minutes
  user            User     @relation(fields: [userId], references: [id])
  session         Session  @relation(fields: [sessionId], references: [id])
}

model HelpOptionContent {
  id      Int    @id @default(autoincrement())
  option  String @unique
  content String @db.Text
}
